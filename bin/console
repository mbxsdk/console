#!/usr/bin/env php
<?php

use Mibexx\Dependency\Business\Container;
use Mibexx\Kernel\Business\Config\Config;
use Mibexx\Kernel\Business\Config\ConfigConstants;
use Mibexx\Kernel\Business\Config\FileLoader;
use Mibexx\Kernel\Business\Kernel;
use Mibexx\Kernel\Business\Locator\Locator;

$autoloadFiles = array(
    __DIR__ . '/../autoload.php',
    __DIR__ . '/vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../../vendor/autoload.php'
);

$autoload = false;
foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
        $autoload = true;
        break;
    }
}

if (!$autoload) {
    echo "No composer autoloader found";
    exit;
}

$reflector = new ReflectionClass(\Mibexx\Kernel\Business\Kernel::class);
$kernelFile = $reflector->getFileName();
$kernelPath = dirname($kernelFile);

try {
    $config = new Config(
        [
            ConfigConstants::APPLICATION_PATH      => realpath($kernelPath . '/../../../../../../../'),
            ConfigConstants::APPLICATION_NAMESPACE => 'App'
        ]
    );

    if (is_dir($config->get(ConfigConstants::APPLICATION_PATH) . '/config')) {
        $configLoader = new FileLoader($config);
        $configLoader->loadFromDir($config->get(ConfigConstants::APPLICATION_PATH) . '/config');
    }

    $container = new Container();
    $container->setConfig($config);

    $locator = new Locator($container);

    $locator->Dependency()->Facade()->loadDependencies();
    $locator->Dependency()->Facade()->loadInjections();
    $console = $locator->Console()->Facade();
    $console->runConsole();
}
catch (\Exception $e) {
    if (
        !$config->has(ConfigConstants::APPLICATION_ENVIRONMENT)
        || ConfigConstants::APPLICATION_ENVIRONMENT === 'development'
    ) {
        echo 'Console Error' . PHP_EOL;
        echo $e->getMessage();
        echo PHP_EOL;
        echo $e->getTraceAsString();
        exit(1);
    }
}

